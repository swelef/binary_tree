//        Copyright Vladimir Marko 2006 - 2010.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#include <stddef.h>
#include <stdlib.h>

#include "avltree_generate.h"

#include "bintree_impl_begin.h"

struct BINTREE_MANGLE_(avl_generate) {
    BINTREE_POINTER the_root_;
    STORAGE_ITERATOR begin_;
    STORAGE_ITERATOR end_;

    // min and max number of nodes for a given depth
    size_t* minnodes_;
    size_t* maxnodes_;
    size_t minmaxnodes_size_;

    // current depth
    size_t depth_;

    // cached node count for which we are generating the trees
    size_t nodes_;
    // cached index of the current leftmost node
    size_t first_index_;

    // preallocated helper arrays for next()
    size_t* nodecount_;
    size_t* nodedepth_;
};

BINTREE_LKG_ BINTREE_MANGLE_(avl_generate)* BINTREE_MANGLE_(avl_generate_alloc)(
        BINTREE_TRPAR_ BINTREE_POINTER root_,
        STORAGE_ITERATOR storage_begin_,STORAGE_ITERATOR storage_end_)
{
    BINTREE_MANGLE_(avl_generate)* g_;
    size_t d_,min_;
    size_t nodes_ = 0u;
    STORAGE_ITERATOR i_;
    for(i_=storage_begin_;i_!=storage_end_;i_=STORAGE_NEXT(i_)){
        ++nodes_;
    }
    if(nodes_==0) goto error0_;
    g_ = (BINTREE_MANGLE_(avl_generate)*)malloc(sizeof(BINTREE_MANGLE_(avl_generate)));
    if(g_==NULL) goto error0_;
    g_->minnodes_ = (size_t*)malloc(nodes_*sizeof(size_t)); //< overkill for simplicity
    if(g_->minnodes_==NULL) goto error1_;
    g_->maxnodes_ = (size_t*)malloc(nodes_*sizeof(size_t)); //< overkill for simplicity
    if(g_->maxnodes_==NULL) goto error2_;
    g_->nodecount_ = (size_t*)malloc(nodes_*sizeof(size_t));
    if(g_->nodecount_==NULL) goto error3_;
    g_->nodedepth_ = (size_t*)malloc(nodes_*sizeof(size_t));
    if(g_->nodedepth_==NULL) goto error4_;

    g_->the_root_ = root_;
    g_->begin_ = storage_begin_;
    g_->end_ = storage_end_;
    g_->nodes_ = nodes_;
    // init minnodes_ and maxnodes_
    g_->minnodes_[0] = 0;
    g_->maxnodes_[0] = 0;
    g_->minmaxnodes_size_ = 1u;
    d_ = 1u;
    min_;
    for(min_=1u;min_<=nodes_;++d_) {
        g_->minnodes_[d_] = min_;
        g_->maxnodes_[d_] = g_->maxnodes_[d_-1u]*2u+1u;
        min_ += g_->minnodes_[d_-1u]+1u;
    }
    g_->minmaxnodes_size_ = d_;
    // init the first tree
    BINTREE_MANGLE_(avl_generate_first)(BINTREE_TRPAR_ g_);
    return g_;

error4_:
    free(g_->nodecount_);
error3_:
    free(g_->maxnodes_);
error2_:
    free(g_->minnodes_);
error1_:
    free(g_);
error0_:
    return NULL;
}

BINTREE_LKG_ void BINTREE_MANGLE_(avl_generate_free)(
        BINTREE_TRPAR_ BINTREE_MANGLE_(avl_generate)* g_)
{
    if(g_!=NULL){
        free(g_->nodedepth_);
        free(g_->nodecount_);
        free(g_->maxnodes_);
        free(g_->minnodes_);
        free(g_);
    }
}

static STORAGE_ITERATOR BINTREE_MANGLE_(avl_generate_make_first_tree_)(
        BINTREE_TRPAR_ BINTREE_MANGLE_(avl_generate)* g_,
        BINTREE_POINTER parent_,STORAGE_ITERATOR first_,size_t treenodes_,
        size_t treedepth_)
{
    if(treenodes_==0u){
        return first_;
    }
    BINTREE_POINTER firstp_ = STORAGE_ITER_TO_PTR(first_);
    if(treenodes_==1u){
        BINTREE_SET_BALANCE(firstp_,BINTREE_BALANCED);
        BINTREE_SET_LEFT(firstp_,BINTREE_NULL);
        BINTREE_SET_RIGHT(firstp_,BINTREE_NULL);
        BINTREE_SET_PARENT(firstp_,parent_);
        return STORAGE_NEXT(first_);
    }
    size_t leftdepth_;
    size_t leftnodes_;
    const size_t maxright_plusone_= g_->maxnodes_[treedepth_-1u]+1u;
    if(treenodes_<=g_->maxnodes_[treedepth_-2u]+maxright_plusone_){
        BINTREE_SET_BALANCE(firstp_,BINTREE_RIGHT_HEAVY); // we can fit it in
        leftdepth_= treedepth_-2u;
        leftnodes_= (treenodes_<=g_->minnodes_[treedepth_-2u]+maxright_plusone_)
                    ? g_->minnodes_[treedepth_-2u]
                    : treenodes_-maxright_plusone_;
    }else{
        BINTREE_SET_BALANCE(firstp_,BINTREE_BALANCED); // must be a balanced node
        leftdepth_= treedepth_-1u;
        leftnodes_= treenodes_-maxright_plusone_;
    }
    BINTREE_SET_PARENT(STORAGE_ITER_TO_PTR(first_),parent_);
    STORAGE_ITERATOR ret_ = STORAGE_NEXT(first_);
    BINTREE_POINTER retp_ = STORAGE_ITER_TO_PTR(ret_);
    if(leftnodes_!=0u){
        BINTREE_SET_LEFT(firstp_,retp_);
        ret_ = BINTREE_MANGLE_(avl_generate_make_first_tree_)(BINTREE_TRARG_ g_,firstp_,ret_,leftnodes_,leftdepth_);
        retp_ = STORAGE_ITER_TO_PTR(ret_);
    }else{
        BINTREE_SET_LEFT(STORAGE_ITER_TO_PTR(first_),BINTREE_NULL);
    }
    BINTREE_SET_RIGHT(firstp_,retp_);
    ret_ = BINTREE_MANGLE_(avl_generate_make_first_tree_)(BINTREE_TRARG_ g_,firstp_,ret_,treenodes_-1u-leftnodes_,treedepth_-1u);
    return ret_;
}

static void BINTREE_MANGLE_(avl_generate_first_for_depth_)(
        BINTREE_TRPAR_ BINTREE_MANGLE_(avl_generate)* g_)
{
    BINTREE_POINTER root_ = g_->the_root_;
    BINTREE_MANGLE_(avl_generate_make_first_tree_)(BINTREE_TRARG_ g_,root_,g_->begin_,g_->nodes_,g_->depth_);
    BINTREE_SET_LEFT(root_,STORAGE_ITER_TO_PTR(g_->begin_)); // top
    STORAGE_ITERATOR tmp_ = g_->begin_;
    g_->first_index_ = 0u;
    while(BINTREE_LEFT(STORAGE_ITER_TO_PTR(tmp_))!=BINTREE_NULL){
        tmp_ = STORAGE_NEXT(tmp_);
        ++g_->first_index_;
    }
    BINTREE_SET_PARENT(root_,STORAGE_ITER_TO_PTR(tmp_)); // leftmost
    tmp_ = STORAGE_PREV(g_->end_);
    BINTREE_SET_RIGHT(root_,STORAGE_ITER_TO_PTR(tmp_)); // rightmost
}

BINTREE_LKG_ void BINTREE_MANGLE_(avl_generate_first)(
        BINTREE_TRPAR_ BINTREE_MANGLE_(avl_generate)* g_)
{
    g_->depth_ = g_->minmaxnodes_size_-1u;
    BINTREE_MANGLE_(avl_generate_first_for_depth_)(BINTREE_TRPAR_ g_);
}

BINTREE_LKG_ int BINTREE_MANGLE_(avl_generate_finish_next_)(
        BINTREE_TRPAR_ BINTREE_MANGLE_(avl_generate)* g_,
        STORAGE_ITERATOR node_,size_t index_,size_t leftcount_)
{
    size_t count_ = g_->nodecount_[index_];
    STORAGE_ITERATOR next_ = STORAGE_NEXT(node_);
    // remake left and right subtrees
    size_t depth_ = g_->nodedepth_[index_];
    if(count_==2u){
        BINTREE_SET_LEFT(STORAGE_ITER_TO_PTR(node_),STORAGE_ITER_TO_PTR(next_));
        next_ = STORAGE_NEXT(next_);
        BINTREE_SET_RIGHT(STORAGE_ITER_TO_PTR(node_),BINTREE_NULL);
    }else{
        BINTREE_BALANCE_TYPE bal_ = BINTREE_BALANCE(STORAGE_ITER_TO_PTR(node_));
        next_ = BINTREE_MANGLE_(avl_generate_make_first_tree_)(
                BINTREE_TRARG_ g_,STORAGE_ITER_TO_PTR(node_),next_,
                leftcount_,depth_-(bal_==BINTREE_RIGHT_HEAVY ? 2u : 1u));
        BINTREE_SET_RIGHT(STORAGE_ITER_TO_PTR(node_),STORAGE_ITER_TO_PTR(next_));
        next_ = BINTREE_MANGLE_(avl_generate_make_first_tree_)(
                BINTREE_TRARG_ g_,STORAGE_ITER_TO_PTR(node_),next_,
                count_-1u-leftcount_,depth_-(bal_==BINTREE_LEFT_HEAVY ? 2u : 1u));
    }
    // correct leftmost if necessary
    if(index_<=g_->first_index_){
        g_->first_index_ = index_;
        while(BINTREE_LEFT(STORAGE_ITER_TO_PTR(node_))!=BINTREE_NULL){
            node_ = STORAGE_NEXT(node_);
            ++g_->first_index_;
        }
        BINTREE_SET_PARENT(g_->the_root_,STORAGE_ITER_TO_PTR(node_));
    }
    index_ += count_;
    // restart subtrees to the right
    while(index_!=g_->nodes_){ // while(next_!=last_){
        count_ = g_->nodecount_[index_];
        next_ = BINTREE_MANGLE_(avl_generate_make_first_tree_)(
                BINTREE_TRARG_ g_,BINTREE_PARENT(STORAGE_ITER_TO_PTR(next_)),next_,
                count_,g_->nodedepth_[index_]);
        index_ += count_;
    }
    // set correct rightmost
    next_ = STORAGE_PREV(next_);
    BINTREE_SET_RIGHT(g_->the_root_,STORAGE_ITER_TO_PTR(next_));
}

BINTREE_LKG_ int BINTREE_MANGLE_(avl_generate_next)(
        BINTREE_TRPAR_ BINTREE_MANGLE_(avl_generate)* g_)
{
    STORAGE_ITERATOR node_ = g_->end_;
    size_t i_;
    for(i_=g_->nodes_;i_!=0u;){
        --i_;
        node_ = STORAGE_PREV(node_);
        // cache left and right
        BINTREE_POINTER left_ = BINTREE_LEFT(STORAGE_ITER_TO_PTR(node_));
        BINTREE_POINTER right_ = BINTREE_RIGHT(STORAGE_ITER_TO_PTR(node_));
        // special case null pointers
        if(right_==BINTREE_NULL){
            if(left_==BINTREE_NULL){
                g_->nodecount_[i_]=1u;
                g_->nodedepth_[i_]=1u;
            }else{
                g_->nodecount_[i_]=2u;
                g_->nodedepth_[i_]=2u;
            }
            continue;
        }
        if(left_==BINTREE_NULL){
            BINTREE_SET_BALANCE(STORAGE_ITER_TO_PTR(node_),BINTREE_LEFT_HEAVY);
            if(i_+2u==g_->nodes_){
                STORAGE_ITERATOR next_ = STORAGE_NEXT(node_);
                BINTREE_SET_LEFT(STORAGE_ITER_TO_PTR(node_),STORAGE_ITER_TO_PTR(next_));
                BINTREE_SET_RIGHT(STORAGE_ITER_TO_PTR(node_),BINTREE_NULL);
                BINTREE_SET_RIGHT(g_->the_root_,STORAGE_ITER_TO_PTR(node_));
                if(g_->nodes_==2u){
                    BINTREE_SET_PARENT(g_->the_root_,STORAGE_ITER_TO_PTR(next_));
                }
                return 1;
            }
            g_->nodecount_[i_]=2;
            BINTREE_MANGLE_(avl_generate_finish_next_)(
                    BINTREE_TRARG_ g_,node_,i_,1u);
            return 1;
        }

        // prepare necessary decission variables
        size_t leftcount_ = g_->nodecount_[i_+1u];
        size_t rightcount_ = g_->nodecount_[i_+1u+leftcount_];
        g_->nodecount_[i_] = 1u+leftcount_+rightcount_;
        size_t leftdepth_ = g_->nodedepth_[i_+1u];
        size_t rightdepth_ = g_->nodedepth_[i_+1u+leftcount_];

        // try moving one node from right subtree to the left one
        if(leftcount_<g_->maxnodes_[leftdepth_] && rightcount_>g_->minnodes_[rightdepth_]){
            g_->nodedepth_[i_] = 1u+(leftdepth_>rightdepth_ ? leftdepth_ : rightdepth_);
            ++leftcount_;
            BINTREE_MANGLE_(avl_generate_finish_next_)(
                    BINTREE_TRARG_ g_,node_,i_,leftcount_);
            return 1;
        }

        // if left heavy, continue
        if(leftdepth_>rightdepth_){
            g_->nodedepth_[i_] = 1u+leftdepth_;
            continue;
        }

        // if right heavy, we can finish with either balanced or left heavy subtree
        if(leftdepth_<rightdepth_){
            g_->nodedepth_[i_] = 1u+rightdepth_;
            if(g_->nodecount_[i_]>=1u+2u*g_->minnodes_[rightdepth_]){
                // make balanced
                BINTREE_SET_BALANCE(STORAGE_ITER_TO_PTR(node_),BINTREE_BALANCED);
                leftcount_ = (g_->nodecount_[i_]<=1u+g_->minnodes_[rightdepth_]+g_->maxnodes_[rightdepth_])
                             ? g_->minnodes_[rightdepth_]
                             : g_->nodecount_[i_]-1u-g_->maxnodes_[rightdepth_];
            }else{
                // make left heavy
                BINTREE_SET_BALANCE(STORAGE_ITER_TO_PTR(node_),BINTREE_LEFT_HEAVY);
                leftcount_ = (g_->nodecount_[i_]<=1u+g_->minnodes_[rightdepth_]+g_->maxnodes_[leftdepth_])
                             ? g_->minnodes_[rightdepth_]
                             : g_->nodecount_[i_]-1u-g_->maxnodes_[leftdepth_];
            }
            BINTREE_MANGLE_(avl_generate_finish_next_)(
                    BINTREE_TRARG_ g_,node_,i_,leftcount_);
            return 1;
        }

        // try making left heavy from balanced subtree
        g_->nodedepth_[i_] = 1u+leftdepth_;
        if(g_->nodecount_[i_]<=1u+g_->maxnodes_[leftdepth_-1u]+g_->maxnodes_[leftdepth_]){
            // make left_heavy
            BINTREE_SET_BALANCE(STORAGE_ITER_TO_PTR(node_),BINTREE_LEFT_HEAVY);
            leftcount_ = (g_->nodecount_[i_]<=1u+g_->minnodes_[leftdepth_]+g_->maxnodes_[leftdepth_-1u])
                         ? g_->minnodes_[leftdepth_]
                         : g_->nodecount_[i_]-1u-g_->maxnodes_[leftdepth_-1u];
            BINTREE_MANGLE_(avl_generate_finish_next_)(
                    BINTREE_TRARG_ g_,node_,i_,leftcount_);
            return 1;
        }
    }
    if(g_->depth_!=0u && g_->maxnodes_[g_->depth_-1]>=g_->nodes_){
        --g_->depth_;
        BINTREE_MANGLE_(avl_generate_first_for_depth_)(
                BINTREE_TRARG_ g_);
        return 1;
    }
    BINTREE_MANGLE_(avl_generate_first)(
            BINTREE_TRARG_ g_);
    return 0;
}

#include "bintree_impl_end.h"
