//        Copyright Vladimir Marko 2005 - 2010.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#include "bintree_base.h"
#include "bintree_search.h"
#include "bintree_root.h"
#include "bintree_traverse_base.h"

#include "bintree_impl_begin.h"

#define BINTREE_BODY_LOWER_BOUND_(c_) \
    BINTREE_PTRTYPE_(c_) lb_ = root_; \
    BINTREE_PTRTYPE_(c_) node_ = BINTREE_FN_(c_,top)(BINTREE_TRAITS_ARG root_); \
    while(node_!=BINTREE_NULL){ \
        if(BINTREE_COMPARE(BINTREE_KEY(node_),key_)){ \
            node_ = BINTREE_TOPOLOGY_(c_,RIGHT)(node_); \
        }else{ \
            lb_ = node_; \
            node_ = BINTREE_TOPOLOGY_(c_,LEFT)(node_); \
        } \
    } \
    return lb_

#define BINTREE_BODY_UPPER_BOUND_(c_) \
    BINTREE_PTRTYPE_(c_) ub_ = root_; \
    BINTREE_PTRTYPE_(c_) node_ = BINTREE_FN_(c_,top)(BINTREE_TRAITS_ARG root_); \
    while(node_!=BINTREE_NULL){ \
        if(!BINTREE_COMPARE(key_,BINTREE_KEY(node_))){ \
            node_ = BINTREE_TOPOLOGY_(c_,RIGHT)(node_); \
        }else{ \
            ub_ = node_; \
            node_ = BINTREE_TOPOLOGY_(c_,LEFT)(node_); \
        } \
    } \
    return ub_

#define BINTREE_BODY_FIND_(c_) \
    BINTREE_PTRTYPE_(c_) lb_ = BINTREE_FN_(c_,lower_bound)(BINTREE_TRAITS_ARG root_,key_ BINTREE_COMPARE_ARG); \
    if((lb_!=root_)&&(!BINTREE_COMPARE(key_,BINTREE_KEY(lb_)))){ \
        return lb_; \
    } \
    return root_

// ----------------------------------------------------------------------------
// non-const functions
//

#if defined(BINTREE_POINTER)

BINTREE_LKG_ BINTREE_POINTER BINTREE_MANGLE_(find)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER root_,BINTREE_KEY_TYPE key_ BINTREE_COMPARE_PARAM)
{
    BINTREE_BODY_FIND_(_);
}

BINTREE_LKG_ BINTREE_POINTER BINTREE_MANGLE_(lower_bound)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER root_,BINTREE_KEY_TYPE key_ BINTREE_COMPARE_PARAM)
{
    BINTREE_BODY_LOWER_BOUND_(_);
}

BINTREE_LKG_ BINTREE_POINTER BINTREE_MANGLE_(upper_bound)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER root_,BINTREE_KEY_TYPE key_ BINTREE_COMPARE_PARAM)
{
    BINTREE_BODY_UPPER_BOUND_(_);
}

//
// definitions of helper functions for insert position search with hint
//

#define BINTREE_RETURN_POS_(n_,l_) \
    BINTREE_MANGLE_(pos_type) ret_ = { n_, l_ }; \
    return ret_
#define BINTREE_HINT_TRY_(fn_) BINTREE_FN_(_,fn_)(BINTREE_TRAITS_ARG root_,key_ BINTREE_COMPARE_ARG,hint_)
#define BINTREE_HINT_FAIL_(fn_) BINTREE_FN_(_,fn_)(BINTREE_TRAITS_ARG root_,key_ BINTREE_COMPARE_ARG)
#define BINTREE_TRAVERSE_(fn_,n_) BINTREE_FN_(_,fn_)(BINTREE_TRAITS_ARG n_)

static BINTREE_MANGLE_(pos_type) BINTREE_MANGLE_(try_equal_after)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER root_,BINTREE_KEY_TYPE key_ BINTREE_COMPARE_PARAM,
        BINTREE_POINTER hint_)
{
    // pre: hint_->key<=key_ && distance(hint_,back(root_))>=1
    BINTREE_POINTER tmp_ = BINTREE_RIGHT(hint_);
    if(tmp_==BINTREE_NULL){
        if(!BINTREE_COMPARE(BINTREE_KEY(BINTREE_TRAVERSE_(first_right_parent,hint_)),key_)){
            BINTREE_RETURN_POS_(hint_,0);
        }
    }else{
        tmp_ = BINTREE_TRAVERSE_(leftmost_child,tmp_);
        if(!BINTREE_COMPARE(BINTREE_KEY(tmp_),key_)){
            BINTREE_RETURN_POS_(tmp_,1);
        }
    }
    return BINTREE_HINT_FAIL_(insert_pos_equal);
}

static BINTREE_MANGLE_(pos_type) BINTREE_MANGLE_(try_equal_before)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER root_,BINTREE_KEY_TYPE key_ BINTREE_COMPARE_PARAM,
        BINTREE_POINTER hint_)
{
    // pre: hint_->key>key_ && distance(front(root_),hint_)>=1
    BINTREE_POINTER tmp_ = BINTREE_LEFT(hint_);
    if(tmp_==BINTREE_NULL){
        if(!BINTREE_COMPARE(key_,BINTREE_KEY(BINTREE_TRAVERSE_(first_left_parent,hint_)))){
            BINTREE_RETURN_POS_(hint_,1);
        }
    }else{
        tmp_ = BINTREE_TRAVERSE_(rightmost_child,tmp_);
        if(!BINTREE_COMPARE(key_,BINTREE_KEY(tmp_))){
            BINTREE_RETURN_POS_(tmp_,0);
        }
    }
    return BINTREE_HINT_FAIL_(insert_pos_equal);
}

static BINTREE_MANGLE_(pos_type) BINTREE_MANGLE_(try_unique_after)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER root_,BINTREE_KEY_TYPE key_ BINTREE_COMPARE_PARAM,
        BINTREE_POINTER hint_)
{
    // pre: hint_->key<=key_ && distance(hint_,back(root_))>=1
    BINTREE_POINTER tmp_ = BINTREE_RIGHT(hint_);
    if(tmp_==BINTREE_NULL){
        if(BINTREE_COMPARE(key_,BINTREE_KEY(BINTREE_TRAVERSE_(first_right_parent,hint_)))){
            BINTREE_RETURN_POS_(BINTREE_COMPARE(BINTREE_KEY(hint_),key_) ? hint_ : BINTREE_NULL,0);
        }
    }else{
        tmp_ = BINTREE_TRAVERSE_(leftmost_child,tmp_);
        if(BINTREE_COMPARE(key_,BINTREE_KEY(tmp_))){
            BINTREE_RETURN_POS_(BINTREE_COMPARE(BINTREE_KEY(hint_),key_) ? tmp_ : BINTREE_NULL,1);
        }
    }
    return BINTREE_HINT_FAIL_(insert_pos_unique);
}

static BINTREE_MANGLE_(pos_type) BINTREE_MANGLE_(try_unique_before)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER root_,BINTREE_KEY_TYPE key_ BINTREE_COMPARE_PARAM,
        BINTREE_POINTER hint_)
{
    // pre: hint_->key>key_ && distance(front(root_),hint_)>=1
    BINTREE_POINTER tmp_ = BINTREE_LEFT(hint_);
    if(tmp_==BINTREE_NULL){
        if(BINTREE_COMPARE(BINTREE_KEY(BINTREE_TRAVERSE_(first_left_parent,hint_)),key_)){
            BINTREE_RETURN_POS_(hint_,1);
        }
    }else{
        tmp_ = BINTREE_TRAVERSE_(rightmost_child,tmp_);
        if(BINTREE_COMPARE(BINTREE_KEY(tmp_),key_)){
            BINTREE_RETURN_POS_(tmp_,0);
        }
    }
    return BINTREE_HINT_FAIL_(insert_pos_unique);
}

static BINTREE_MANGLE_(pos_type) BINTREE_MANGLE_(try_equal_front)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER root_,BINTREE_KEY_TYPE key_ BINTREE_COMPARE_PARAM,
        BINTREE_POINTER hint_)
{
    if((hint_==root_)||(!BINTREE_COMPARE(BINTREE_KEY(hint_),key_))){
       BINTREE_RETURN_POS_(hint_,1);
    }
    BINTREE_POINTER tmp_ = BINTREE_RIGHT(hint_);
    if(tmp_!=BINTREE_NULL){
        tmp_ = BINTREE_TRAVERSE_(leftmost_child,tmp_);
        if(!BINTREE_COMPARE(BINTREE_KEY(tmp_),key_)){
            BINTREE_RETURN_POS_(tmp_,1);
        }
    }else{
        tmp_ = BINTREE_PARENT(hint_);
        if((tmp_==root_)||(!BINTREE_COMPARE(BINTREE_KEY(tmp_),key_))){
            BINTREE_RETURN_POS_(hint_,0);
        }
    }
    return BINTREE_HINT_FAIL_(insert_pos_equal);
}

static BINTREE_MANGLE_(pos_type) BINTREE_MANGLE_(try_equal_back)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER root_,BINTREE_KEY_TYPE key_ BINTREE_COMPARE_PARAM,
        BINTREE_POINTER hint_)
{
    if(!BINTREE_COMPARE(key_,BINTREE_KEY(hint_))){
        BINTREE_RETURN_POS_(hint_,0);
    }
    BINTREE_POINTER tmp_ = BINTREE_LEFT(hint_);
    if(tmp_!=BINTREE_NULL){
        tmp_ = BINTREE_TRAVERSE_(rightmost_child,tmp_);
        if(!BINTREE_COMPARE(key_,BINTREE_KEY(tmp_))){
            BINTREE_RETURN_POS_(tmp_,0);
        }
    }else{
        // hint_==back(.) && hint_!=front(.) && (tmp_==BINTREE_NULL) implies
        //   parent(hint_)!=root_
        tmp_ = BINTREE_PARENT(hint_);
        if(!BINTREE_COMPARE(key_,BINTREE_KEY(tmp_))){
            BINTREE_RETURN_POS_(hint_,1);
        }
    }
    return BINTREE_HINT_FAIL_(insert_pos_equal);
}

static BINTREE_MANGLE_(pos_type) BINTREE_MANGLE_(try_unique_front)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER root_,BINTREE_KEY_TYPE key_ BINTREE_COMPARE_PARAM,
        BINTREE_POINTER hint_)
{
    if((hint_==root_)||(BINTREE_COMPARE(key_,BINTREE_KEY(hint_)))){
        BINTREE_RETURN_POS_(hint_,1);
    }
    BINTREE_POINTER tmp_ = BINTREE_RIGHT(hint_);
    if(tmp_!=BINTREE_NULL){
        tmp_ = BINTREE_TRAVERSE_(leftmost_child,tmp_);
        if(BINTREE_COMPARE(key_,BINTREE_KEY(tmp_))){
            BINTREE_RETURN_POS_(BINTREE_COMPARE(BINTREE_KEY(hint_),key_) ? tmp_ : BINTREE_NULL,1);
        }
    }else{
        tmp_ = BINTREE_PARENT(hint_);
        if((tmp_==root_)||(BINTREE_COMPARE(key_,BINTREE_KEY(tmp_)))){
            BINTREE_RETURN_POS_(BINTREE_COMPARE(BINTREE_KEY(hint_),key_) ? hint_ : BINTREE_NULL,0);
        }
    }
    return BINTREE_HINT_FAIL_(insert_pos_unique);
}

static BINTREE_MANGLE_(pos_type) BINTREE_MANGLE_(try_unique_back)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER root_,BINTREE_KEY_TYPE key_ BINTREE_COMPARE_PARAM,
        BINTREE_POINTER hint_)
{
    if(BINTREE_COMPARE(BINTREE_KEY(hint_),key_)){
        BINTREE_RETURN_POS_(hint_,0);
    }
    BINTREE_POINTER tmp_=BINTREE_LEFT(hint_);
    if(tmp_!=BINTREE_NULL){
        tmp_ = BINTREE_TRAVERSE_(rightmost_child,tmp_);
        if(BINTREE_COMPARE(BINTREE_KEY(tmp_),key_)){
            BINTREE_RETURN_POS_(BINTREE_COMPARE(key_,BINTREE_KEY(hint_)) ? tmp_: BINTREE_NULL,0);
        }
    }else{
        // hint_==back(.) && hint_!=front(.) && (tmp_==BINTREE_NULL) implies
        //   parent(hint_)!=root_
        tmp_ = BINTREE_PARENT(hint_);
        if(BINTREE_COMPARE(BINTREE_KEY(tmp_),key_)){
            BINTREE_RETURN_POS_(BINTREE_COMPARE(key_,BINTREE_KEY(hint_)) ? hint_ : BINTREE_NULL,1);
        }
    }
    return BINTREE_HINT_FAIL_(insert_pos_unique);
}

//
// definitions of functions for insert position search
//

BINTREE_LKG_ BINTREE_MANGLE_(pos_type) BINTREE_MANGLE_(insert_pos_equal)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER root_,BINTREE_KEY_TYPE key_ BINTREE_COMPARE_PARAM)
{
    BINTREE_POINTER pos_ = root_;
    int left_ = 1;
    BINTREE_POINTER tmp_ = BINTREE_TRAVERSE_(top,root_);
    while(tmp_!=BINTREE_NULL){
        pos_ = tmp_;
        left_ = BINTREE_COMPARE(key_,BINTREE_KEY(tmp_));
        if(left_){
            tmp_ = BINTREE_LEFT(tmp_);
        }else{
            tmp_ = BINTREE_RIGHT(tmp_);
        }
    }
    BINTREE_RETURN_POS_(pos_,left_);
}

BINTREE_LKG_ BINTREE_MANGLE_(pos_type) BINTREE_MANGLE_(insert_pos_unique)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER root_,BINTREE_KEY_TYPE key_ BINTREE_COMPARE_PARAM)
{
    BINTREE_POINTER pos_ = root_;
    BINTREE_POINTER tmp_ = BINTREE_TRAVERSE_(top,root_);
    while((tmp_!=BINTREE_NULL)&&(BINTREE_COMPARE(key_,BINTREE_KEY(tmp_)))){
        pos_ = tmp_;
        tmp_ = BINTREE_LEFT(tmp_);
    }
    if(tmp_==BINTREE_NULL){
        BINTREE_RETURN_POS_(pos_,1);
    }
    BINTREE_POINTER last_right_ = tmp_;
    pos_ = tmp_;
    int left_ = 0;
    for(tmp_=BINTREE_RIGHT(tmp_);tmp_!=BINTREE_NULL;){
        pos_ = tmp_;
        left_ = BINTREE_COMPARE(key_,BINTREE_KEY(tmp_));
        if(left_){
            tmp_ = BINTREE_LEFT(tmp_);
        }else{
            last_right_ = tmp_;
            tmp_ = BINTREE_RIGHT(tmp_);
        }
    }
    BINTREE_RETURN_POS_(BINTREE_COMPARE(BINTREE_KEY(last_right_),key_) ? pos_ : BINTREE_NULL,left_);
}

BINTREE_LKG_ BINTREE_MANGLE_(pos_type) BINTREE_MANGLE_(insert_pos_equal_hint)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER root_,BINTREE_KEY_TYPE key_ BINTREE_COMPARE_PARAM,
        BINTREE_POINTER hint_)
{
    BINTREE_POINTER tmp_ = BINTREE_TRAVERSE_(front,root_);
    if(hint_==tmp_){
        return BINTREE_HINT_TRY_(try_equal_front);
    }
    tmp_ = BINTREE_TRAVERSE_(back,root_);
    if(hint_==root_){
        if(!BINTREE_COMPARE(key_,BINTREE_KEY(tmp_))){
            BINTREE_RETURN_POS_(tmp_,0);
        }
        return BINTREE_HINT_FAIL_(insert_pos_equal);
    }
    if(hint_==tmp_){
        return BINTREE_HINT_TRY_(try_equal_back);
    }
    if(BINTREE_COMPARE(key_,BINTREE_KEY(hint_))){
        return BINTREE_HINT_TRY_(try_equal_before);
    }
    return BINTREE_HINT_TRY_(try_equal_after);
}

BINTREE_LKG_ BINTREE_MANGLE_(pos_type) BINTREE_MANGLE_(insert_pos_unique_hint)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER root_,BINTREE_KEY_TYPE key_ BINTREE_COMPARE_PARAM,
        BINTREE_POINTER hint_)
{
    BINTREE_POINTER tmp_ = BINTREE_TRAVERSE_(front,root_);
    if(hint_==tmp_){
        return BINTREE_HINT_TRY_(try_unique_front);
    }
    tmp_ = BINTREE_TRAVERSE_(back,root_);
    if(hint_==root_){
        if(BINTREE_COMPARE(BINTREE_KEY(tmp_),key_)){
            BINTREE_RETURN_POS_(tmp_,0);
        }
        return BINTREE_HINT_FAIL_(insert_pos_unique);
    }
    if(hint_==tmp_){
        return BINTREE_HINT_TRY_(try_unique_back);
    }
    if(BINTREE_COMPARE(key_,BINTREE_KEY(hint_))){
        return BINTREE_HINT_TRY_(try_unique_before);
    }
    return BINTREE_HINT_TRY_(try_unique_after);
}

#undef BINTREE_TRAVERSE_
#undef BINTREE_HINT_FAIL_
#undef BINTREE_HINT_TRY_
#undef BINTREE_RETURN_POS_

#endif // defined(BINTREE_POINTER)

// ----------------------------------------------------------------------------
// const functions
//

#if defined(BINTREE_CONST_POINTER)

BINTREE_LKG_ BINTREE_CONST_POINTER BINTREE_MANGLE_(cfind)(
        BINTREE_TRAITS_PARAM BINTREE_CONST_POINTER root_,BINTREE_KEY_TYPE key_ BINTREE_COMPARE_PARAM)
{
    BINTREE_BODY_FIND_(_C);
}

BINTREE_LKG_ BINTREE_CONST_POINTER BINTREE_MANGLE_(clower_bound)(
        BINTREE_TRAITS_PARAM BINTREE_CONST_POINTER root_,BINTREE_KEY_TYPE key_ BINTREE_COMPARE_PARAM)
{
    BINTREE_BODY_LOWER_BOUND_(_C);
}

BINTREE_LKG_ BINTREE_CONST_POINTER BINTREE_MANGLE_(cupper_bound)(
        BINTREE_TRAITS_PARAM BINTREE_CONST_POINTER root_,BINTREE_KEY_TYPE key_ BINTREE_COMPARE_PARAM)
{
    BINTREE_BODY_UPPER_BOUND_(_C);
}

#endif // defined(BINTREE_CONST_POINTER)

#undef BINTREE_BODY_FIND_
#undef BINTREE_BODY_LOWER_BOUND_
#undef BINTREE_BODY_UPPER_BOUND_

#include "bintree_impl_end.h"
