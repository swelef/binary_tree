//        Copyright Vladimir Marko 2005 - 2010.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#include "bintree_balance.h"
#include "bintree_root.h"

#include "bintree_impl_begin.h"

#if defined(BINTREE_POINTER)

// replace left child, new child exists -- set its parent
BINTREE_LKG_ void BINTREE_MANGLE_(replace_left)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER node_,BINTREE_POINTER left_)
{
    BINTREE_TOPOLOGY_(_,SET_PARENT)(left_,node_);
    BINTREE_TOPOLOGY_(_,SET_LEFT)(node_,left_);
}
// replace right child, new child exists -- set its parent
BINTREE_LKG_ void BINTREE_MANGLE_(replace_right)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER node_,BINTREE_POINTER right_)
{
    BINTREE_TOPOLOGY_(_,SET_PARENT)(right_,node_);
    BINTREE_TOPOLOGY_(_,SET_RIGHT)(node_,right_);
}
// replace left child, set child's parent if child exists
BINTREE_LKG_ void BINTREE_MANGLE_(replace_left_test)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER node_,BINTREE_POINTER left_)
{
    if(left_!=BINTREE_NULL){
        BINTREE_TOPOLOGY_(_,SET_PARENT)(left_,node_);
    }
    BINTREE_TOPOLOGY_(_,SET_LEFT)(node_,left_);
}
// replace right child, set child's parent if child exists
BINTREE_LKG_ void BINTREE_MANGLE_(replace_right_test)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER node_,BINTREE_POINTER right_)
{
    if(right_!=BINTREE_NULL){
        BINTREE_TOPOLOGY_(_,SET_PARENT)(right_,node_);
    }
    BINTREE_TOPOLOGY_(_,SET_RIGHT)(node_,right_);
}

// replace left child, move the old child to new left's right if exists
BINTREE_LKG_ void BINTREE_MANGLE_(replace_left_move_child_test)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER node_,BINTREE_POINTER left_)
{
    BINTREE_FN_(_,replace_right_test)(BINTREE_TRAITS_ARG left_,BINTREE_TOPOLOGY_(_,LEFT)(node_));
    BINTREE_FN_(_,replace_left)(BINTREE_TRAITS_ARG node_,left_);
}
// replace right child, move the old child to new right's left if exists
BINTREE_LKG_ void BINTREE_MANGLE_(replace_right_move_child_test)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER node_,BINTREE_POINTER right_)
{
    BINTREE_FN_(_,replace_left_test)(BINTREE_TRAITS_ARG right_,BINTREE_TOPOLOGY_(_,RIGHT)(node_));
    BINTREE_FN_(_,replace_right)(BINTREE_TRAITS_ARG node_,right_);
}

//
// leaf functions
//

// clear children
BINTREE_LKG_ void BINTREE_MANGLE_(clear_children)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER node_)
{
    BINTREE_TOPOLOGY_(_,SET_LEFT)(node_,BINTREE_NULL);
    BINTREE_TOPOLOGY_(_,SET_RIGHT)(node_,BINTREE_NULL);
}
// make left leaf, i.e. replace left child and set its children to BINTREE_NULL
BINTREE_LKG_ void BINTREE_MANGLE_(make_left_leaf)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER node_,BINTREE_POINTER leaf_)
{
    BINTREE_FN_(_,replace_left)(BINTREE_TRAITS_ARG node_,leaf_);
    BINTREE_FN_(_,clear_children)(BINTREE_TRAITS_ARG leaf_);
}
// make right leaf, i.e. replace right child and set its children to BINTREE_NULL
BINTREE_LKG_ void BINTREE_MANGLE_(make_right_leaf)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER node_,BINTREE_POINTER leaf_)
{
    BINTREE_FN_(_,replace_right)(BINTREE_TRAITS_ARG node_,leaf_);
    BINTREE_FN_(_,clear_children)(BINTREE_TRAITS_ARG leaf_);
}
// remove leaf, update front and back if necessary, return parent
BINTREE_LKG_ BINTREE_POINTER BINTREE_MANGLE_(remove_leaf_update_ends)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER root_,BINTREE_POINTER leaf_)
{
    BINTREE_POINTER parent_ = BINTREE_TOPOLOGY_(_,PARENT)(leaf_);
    if(BINTREE_FN_(_,front)(BINTREE_TRAITS_ARG root_)==leaf_){
        BINTREE_FN_(_,set_front)(BINTREE_TRAITS_ARG root_,parent_);
    }
    if(BINTREE_FN_(_,back)(BINTREE_TRAITS_ARG root_)==leaf_){
        BINTREE_FN_(_,set_back)(BINTREE_TRAITS_ARG root_,parent_);
    }
    if(BINTREE_TOPOLOGY_(_,LEFT)(parent_)==leaf_){
        BINTREE_TOPOLOGY_(_,SET_LEFT)(parent_,BINTREE_NULL);
    }else{
        BINTREE_TOPOLOGY_(_,SET_RIGHT)(parent_,BINTREE_NULL);
    }
    return parent_;
}

//
// both children replacement functions
//

// replace both left and right moving node's old children to new positions
BINTREE_LKG_ void BINTREE_MANGLE_(replace_both_move_children_test)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER node_,
        BINTREE_POINTER left_,BINTREE_POINTER right_)
{
    BINTREE_FN_(_,replace_left_move_child_test)(BINTREE_TRAITS_ARG node_,left_);
    BINTREE_FN_(_,replace_right_move_child_test)(BINTREE_TRAITS_ARG node_,right_);
}

// replace child by a new one, return parent
BINTREE_LKG_ BINTREE_POINTER BINTREE_MANGLE_(replace_child)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER old_,BINTREE_POINTER new_)
{
    BINTREE_POINTER parent_ = BINTREE_TOPOLOGY_(_,PARENT)(old_);
    BINTREE_TOPOLOGY_(_,SET_PARENT)(new_,parent_);
    if(BINTREE_TOPOLOGY_(_,LEFT)(parent_)==old_){
        BINTREE_TOPOLOGY_(_,SET_LEFT)(parent_,new_);
    }else{
        BINTREE_TOPOLOGY_(_,SET_RIGHT)(parent_,new_);
    }
    return parent_;
}

//
// rotation functions
//

// rotate left, middle is known not to exist
BINTREE_LKG_ void BINTREE_MANGLE_(rotate_left)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER node_,BINTREE_POINTER right_)
{
    BINTREE_FN_(_,replace_right_test)(BINTREE_TRAITS_ARG node_,BINTREE_TOPOLOGY_(_,LEFT)(right_));
    BINTREE_FN_(_,replace_child)(BINTREE_TRAITS_ARG node_,right_);
    BINTREE_FN_(_,replace_left)(BINTREE_TRAITS_ARG right_,node_);
}
// rotate right, middle is known not to exist
BINTREE_LKG_ void BINTREE_MANGLE_(rotate_right)(
        BINTREE_TRAITS_PARAM BINTREE_POINTER node_,BINTREE_POINTER left_)
{
    BINTREE_FN_(_,replace_left_test)(BINTREE_TRAITS_ARG node_,BINTREE_TOPOLOGY_(_,RIGHT)(left_));
    BINTREE_FN_(_,replace_child)(BINTREE_TRAITS_ARG node_,left_);
    BINTREE_FN_(_,replace_right)(BINTREE_TRAITS_ARG left_,node_);
}

#endif // defined(BINTREE_POINTER)

#include "bintree_impl_end.h"
